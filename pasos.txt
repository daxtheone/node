
Nota

net stop LxssManager
net start LxssManager

Pasos

1 => npm init -y
2 => creamos el archivo .gitignore  en la raiz

  2.1 => vamos a la URL gitignore.io  => escogemos el entorno = node + windows + linux + macos
  2.2 pegamos el contenido que entrega la pagina del git ignore

3 => Creamos el archivo .editorconfig en la raiz

    3.1 => Buscamos la extensión editorconfig de vscode la que tenga mas k de descargas
    3.2 => Pegamos el contido de la configuracion del vscode

      # Editor configuration, see https://editorconfig.org
      root = true

      [*]
      charset = utf-8
      indent_style = space
      indent_size = 2
      insert_final_newline = true
      trim_trailing_whitespace = true

      [*.js]
      quote_type = single

      [*.md]
      max_line_length = off
      trim_trailing_whitespace = false

4 => Creamos el archivo .eslintrc.json

    4.1 => Editamos Eslintrc

      {
        "parserOptions": {
          "ecmaVersion": 2018
        },
        "extends": [
          "eslint:recommended",
          "prettier"
        ],
        "env": {
          "es6": true,
          "node": true,
          "jest": true
        },
        "rules": {
          "no-console": "warn"
        }
      }


5 => Instalamos Eslint eslint.org (Ver si esta formateando el código, si tiene fix and bugs, variables no usadas)

  npm i nodemon eslint eslint-config-prettier eslint-plugin-prettier prettier -D

6 => Creamos el archivo index.js en la raiz

7 => en el package.json creamos el scripts
    "start": "node index.js",
    "dev" : "nodemon index.js",
    "lint": "eslint"



8 => instalamos express para servir un servicio http

  npm i express

9= > En el index.js hacemos lo mas básico para probar

    const express = require('express')
    const app = express()
    const port = 3000;

    app.get('/',(req, res)=>{
      res.send('Hola mi server en express')
    })

    app.listen(port, ()=>{
      console.log(`Mi port ${port}`)
    })

10 => para los middlewares instalamos la libreria boom

  npm i @hapi/boom

11 => instalamos joi para validar datos de entrada /  www.jou.dev esta la documentación  /  DTO data transfer object

  npm i joi


12 => middlewares populares

    CORS

    Middleware para habilitar CORS (Cross-origin resource sharing) en nuestras rutas o aplicación. http://expressjs.com/en/resources/middleware/cors.html
    Morgan

    Un logger de solicitudes HTTP para Node.js. http://expressjs.com/en/resources/middleware/morgan.html
    Helmet

    Helmet nos ayuda a proteger nuestras aplicaciones Express configurando varios encabezados HTTP. ¡No es a prueba de balas de plata, pero puede ayudar! https://github.com/helmetjs/helmet
    Express Debug

    Nos permite hacer debugging de nuestras aplicaciones en Express mediante el uso de un toolbar en la pagina cuando las estamos desarrollando. https://github.com/devoidfury/express-debug
    Express Slash

    Este middleware nos permite evitar preocuparnos por escribir las rutas con o sin slash al final de ellas. https://github.com/ericf/express-slash
    Passport

    Passport es un middleware que nos permite establecer diferentes estrategias de autenticación a nuestras aplicaciones. https://github.com/jaredhanson/passport

        Puedes encontrar más middlewares populares en el siguiente enlace: http://expressjs.com/en/resources/middleware.html


13 => instalamos libreria de cors

    npm i cors


    /*
      ejemplo de uso de cors restringidos
      const whitelist = ['http://localhost:8080','https://myapp.com']
      const options = {
        origin: (origin, callback)=>{
          if(whitelist.includes(origin)){
            callback(null, true)
          }else{
            callback(new Error('Acceso no permitido'))
          }
        }
      }
      app.use(cors(options))
    */

14 => instalamos el driver para mysql  Documentacion= (https://www.npmjs.com/package/mysql)

    npm install mysql
15 => instalamos el paquete dotenv
  npm i dotenv


16 => instalamos sequalize

      https://sequelize.org/master/manual/getting-started.html

  npm install --save sequelize
  npm install --save mysql2



FASE 2 APOLLO



6=>  npm i apollo-server

7 => Creamos las carpeta db
  resolvers.js
  schema.js


8 => instalamos express
  npm i express
